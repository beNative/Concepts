{
  "Highlighter": {
    "Sample": [
      "// Hello, World! in C++\r\n",
      "\r\n",
      "#include <iostream>\r\n",
      "\r\n",
      "int main()\r\n",
      "{\r\n",
      "    std::cout << \"Hello, World!\" << std::endl;\r\n",
      "    return 0;\r\n",
      "}"
    ],
    "MainRules": {
      "Attributes": {
        "Element": "Editor"
      },
      "SubRules": {
        "Range": [
          {
            "Type": "BlockComment",
            "Attributes": {
              "Element": "Comment"
            },
            "TokenRange": {
              "Open": "/*",
              "Close": "*/"
            }
          },
          {
            "Type": "LineComment",
            "Attributes": {
              "Element": "Comment"
            },
            "Properties": {
              "CloseOnEndOfLine": true
            },
            "TokenRange": {
              "Open": "//"
            }
          },
          {
            "Type": "String",
            "Attributes": {
              "Element": "String"
            },
            "Properties": {
              "CloseOnEndOfLine": true
            },
            "TokenRange": {
              "Open": "'",
              "Close": "'"
            },
            "SubRules": {
              "Range": [
                {
                  "Type": "String",
                  "Attributes": {
                    "Element": "String"
                  },
                  "Properties": {
                    "CloseOnEndOfLine": true,
                    "CloseOnTerm": true
                  },
                  "TokenRange": {
                    "Open": "\\'",
                    "Close": ""
                  }
                },
                {
                  "Type": "String",
                  "Attributes": {
                    "Element": "String"
                  },
                  "Properties": {
                    "CloseOnEndOfLine": true,
                    "CloseOnTerm": true
                  },
                  "TokenRange": {
                    "Open": "\\\\",
                    "Close": ""
                  }
                }
              ]
            }
          },
          {
            "Type": "String",
            "Attributes": {
              "Element": "String"
            },
            "Properties": {
              "CloseOnEndOfLine": true
            },
            "TokenRange": {
              "Open": "\"",
              "Close": "\""
            },
            "SubRules": {
              "Range": [
                {
                  "Type": "String",
                  "Attributes": {
                    "Element": "String"
                  },
                  "Properties": {
                    "CloseOnEndOfLine": true,
                    "CloseOnTerm": true
                  },
                  "TokenRange": {
                    "Open": "\\\"",
                    "Close": ""
                  }
                },
                {
                  "Type": "String",
                  "Attributes": {
                    "Element": "String"
                  },
                  "Properties": {
                    "CloseOnEndOfLine": true,
                    "CloseOnTerm": true
                  },
                  "TokenRange": {
                    "Open": "\\\\",
                    "Close": ""
                  }
                }
              ]
            }
          },
          {
            "Type": "Directive",
            "Attributes": {
              "Element": "Directive"
            },
            "Properties": {
              "CloseOnEndOfLine": true
            },
            "TokenRange": {
              "Open": "#"
            }
          },
          {
            "Type": "Hex",
            "Attributes": {
              "Element": "Number"
            },
            "Delimiters": "*/+-=\\|&()[]{}`~!@,$%^?:;'\".><#'ghijklmnopqrstuwvyzåäö",
            "Properties": {
              "CloseOnTerm": true,
              "CloseOnEndOfLine": true
            },
            "TokenRange": {
              "Open": "0",
              "OpenBreakType": "Any"
            }
          }
        ],
        "KeyList": [
          {
            "Name": "C Keywords",
            "Type": "ReservedWord",
            "Words": [
              "auto",
              "break",
              "case",
              "char",
              "const",
              "continue",
              "default",
              "do",
              "double",
              "else",
              "enum",
              "extern",
              "float",
              "for",
              "goto",
              "if",
              "int",
              "long",
              "register",
              "return",
              "short",
              "signed",
              "sizeof",
              "static",
              "struct",
              "switch",
              "typedef",
              "union",
              "unsigned",
              "void",
              "volatile",
              "while"
            ],
            "Attributes": {
              "Element": "ReservedWord"
            }
          },
          {
            "Name": "C++ Keywords",
            "Type": "ReservedWord",
            "Words": [
              "asm",
              "and",
              "and_eq",
              "bitand",
              "bitor",
              "bool",
              "catch",
              "char",
              "class",
              "compl",
              "const_cast",
              "delete",
              "dynamic_cast",
              "explicit",
              "false",
              "friend",
              "inline",
              "mutable",
              "namespace",
              "new",
              "not",
              "not_eq",
              "operator",
              "or",
              "or_eq",
              "private",
              "protected",
              "public",
              "reinterpret_cast",
              "static_cast",
              "template",
              "this",
              "throw",
              "true",
              "try",
              "typeid",
              "typename",
              "using",
              "virtual",
              "wchar_t",
              "xor",
              "xor_eq"
            ],
            "Attributes": {
              "Element": "ReservedWord"
            }
          },
          {
            "Name": "C++ Predefined Indetifiers",
            "Type": "ReservedWord",
            "Words": [
              "cin",
              "cout",
              "endl",
              "include",
              "INT_MIN",
              "INT_MAX",
              "iomanip",
              "iostream",
              "main",
              "MAX_RAND",
              "npos",
              "NULL",
              "std",
              "string"
            ],
            "Attributes": {
              "Element": "MethodName"
            }
          },
          {
            "Type": "Symbol",
            "Words": [
              ":",
              ";",
              "<",
              ">",
              "=",
              "/",
              "*",
              ".",
              ",",
              "-",
              "+",
              "(",
              ")",
              "[",
              "]",
              "{",
              "}"
            ],
            "Attributes": {
              "Element": "Symbol"
            }
          }
        ],
        "Set": [
          {
            "Type": "Numbers",
            "Symbols": "0123456789",
            "Attributes": {
              "Element": "Number"
            }
          },
          {
            "Type": "Float",
            "Symbols": ".0123456789",
            "Attributes": {
              "Element": "Number"
            }
          }
        ]
      }
    }
  },
  "CodeFolding": {
    "Ranges": [
      {
        "Options": {
          "StringEscapeChar": "\\"
        },
        "SkipRegion": [
          {
            "OpenToken": "'",
            "CloseToken": "'",
            "RegionType": "SingleLineString"
          },
          {
            "OpenToken": "\"",
            "CloseToken": "\"",
            "RegionType": "SingleLineString"
          },
          {
            "OpenToken": "//",
            "RegionType": "SingleLine"
          },
          {
            "OpenToken": "/*",
            "CloseToken": "*/",
            "RegionType": "MultiLine"
          }
        ],
        "FoldRegion": [
          {
            "OpenToken": "{",
            "CloseToken": "}",
            "Properties": {
              "BreakCharFollows": false
            }
          }
        ]
      }
    ]
  },
  "MatchingPair": {
    "Pairs": [
      {
        "OpenToken": "'",
        "CloseToken": "'"
      },
      {
        "OpenToken": "\"",
        "CloseToken": "\""
      },
      {
        "OpenToken": "(",
        "CloseToken": ")"
      },
      {
        "OpenToken": "[",
        "CloseToken": "]"
      },
      {
        "OpenToken": "{",
        "CloseToken": "}"
      }
    ]
  },
  "CompletionProposal": {
    "SkipRegion": [
      {
        "OpenToken": "'",
        "CloseToken": "'",
        "RegionType": "SingleLineString"
      },
      {
        "OpenToken": "\"",
        "CloseToken": "\"",
        "RegionType": "SingleLineString"
      },
      {
        "OpenToken": "//",
        "RegionType": "SingleLine"
      },
      {
        "OpenToken": "/*",
        "CloseToken": "*/",
        "RegionType": "MultiLine"
      }
    ]
  }
}